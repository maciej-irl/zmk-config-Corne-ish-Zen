/*
*
* Copyright (c) 2021 Darryl deHaan
* SPDX-License-Identifier: MIT
*
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define COMBO_TERM_MS 50

// Useful for vim.
#define CLMK_G T
#define CLMK_O SEMICOLON
#define CLMK_SEMI P
#define CLMK_COLON LS(P)

#define L_BASE 0
#define L_CLMK 1
#define L_SYM 2
#define L_NAV 3
#define L_NUM 4
#define L_FUN 5

// ,-----------------------------.   ,-----------------------------.
// |     |     |     |     |     |   |     |     |     |     |     |
// |     |     |     |     |     |   |     |     |     |     |     |
// |     |     |     |     |     |   |     |     |     |     |     |
// `-----------|     |     |     |   |     |     |     |-----------'
//             `-----------------'   `-----------------'

// Key Positions
// ,-----------------------------.   ,-----------------------------.
// |  0  |  1  |  2  |  3  |  4  |   |  5  |  6  |  7  |  8  |  9  |
// | 10  | 11  | 12  | 13  | 14  |   | 15  | 16  | 17  | 18  | 19  |
// | 20  | 21  | 22  | 23  | 24  |   | 25  | 26  | 27  | 28  | 29  |
// `-----------| 30  | 31  | 32  |   | 33  | 34  | 35  |-----------'
//             `-----------------'   `-----------------'

/ {
	combos {
		compatible = "zmk,combos";
		// Left upper.
		combo_backspace {
			timeout-ms = <COMBO_TERM_MS>;
			key-positions = <2 3>;
			bindings = <&kp BACKSPACE>;
			layers = <L_BASE L_CLMK L_NUM>;
		};
		combo_backspace_alt {
			timeout-ms = <COMBO_TERM_MS>;
			key-positions = <1 2>;
			bindings = <&kp LA(BACKSPACE)>;
			layers = <L_BASE L_CLMK L_NUM>;
		};
		combo_backspace_cmd {
			timeout-ms = <COMBO_TERM_MS>;
			key-positions = <1 2 3>;
			bindings = <&kp LG(BACKSPACE)>;
			layers = <L_BASE L_CLMK L_NUM>;
		};
		// Left lower.
		combo_tab {
			timeout-ms = <COMBO_TERM_MS>;
			key-positions = <22 23>;
			bindings = <&kp TAB>;
			layers = <L_BASE L_CLMK>;
		};
		// Right upper.
		combo_esc {
			timeout-ms = <COMBO_TERM_MS>;
			key-positions = <6 7>;
			bindings = <&kp ESC>;
			layers = <L_BASE L_CLMK>;
		};
		// Right lower.
		combo_enter {
			timeout-ms = <COMBO_TERM_MS>;
			key-positions = <26 27>;
			bindings = <&kp ENTER>;
			layers = <L_BASE L_CLMK>;
		};
		combo_cmd {
			timeout-ms = <COMBO_TERM_MS>;
			key-positions = <27 28>;
			bindings = <&kp LEFT_COMMAND>;
			layers = <L_BASE L_CLMK>;
		};
		combo_cmd_enter {
			timeout-ms = <COMBO_TERM_MS>;
			key-positions = <26 27 28>;
			bindings = <&kp LG(ENTER)>;
			layers = <L_BASE L_CLMK>;
		};
	};

	behaviors {
		skq: sticky_key_quick_release {
			compatible = "zmk,behavior-sticky-key";
			label = "STICKY_KEY_QUICK_RELEASE";
			#binding-cells = <1>;
			bindings = <&kp>;
			release-after-ms = <1000>;
			quick-release;
		};
		shift_tab: shift_tab_morph {
			compatible = "zmk,behavior-mod-morph";
			label = "SHIFT_TAB_MORPH";
			#binding-cells = <0>;
			bindings = <&skq LSHIFT>, <&kp TAB>;
			mods = <MOD_LGUI>;
		};
		nav_under: nav_under_morph {
			compatible = "zmk,behavior-mod-morph";
			label = "NUM_UNDER_MORPH";
			#binding-cells = <0>;
			bindings = <&sl L_NAV>, <&kp UNDERSCORE>;
			mods = <MOD_LSFT>;
		};
	};

	keymap {
		compatible = "zmk,keymap";

		default_layer {
			label = "BASE";
// ,-----------------------------.   ,-----------------------------.
// |  Q  | W -WRD-E-BSP- R |  T  |   |  Y  | U -ESC- I |  O  |  '  |
// |  A  |  S  | D   |   F |  G  |   |  H  | J   |   K |  L  |  ;  |
// |  Z  |  X  | C -TAB- V |  B  |   |  N  | M -RET-,-CMD- . |  /  |
// `-----------| fun | nav | SPC |   | SFT | sym | num |-----------'
//             `-----------------'   `-----------------'
			bindings = <
&kp Q		&kp W		&kp E		&kp R		&kp T		&kp Y		&kp U		&kp I		&kp O		&kp APOS
&kp A		&kp S		&kp D		&kp F		&kp G		&kp H		&kp J		&kp K		&kp L		&kp CLMK_O
&kp Z		&kp X		&kp C		&kp V		&kp B		&kp N		&kp M		&kp COMMA	&kp DOT		&kp SLASH
#define THUMB_ROW \
				&sl L_FUN	&nav_under	&kp SPACE	&shift_tab	&sl L_SYM 	&sl L_NUM
THUMB_ROW
			>;
		};

		// Same as above but hard-coded Colemak.
		// Note right now there is no way to type : and ;
		colemak_layer {
			label = "CLMK";
// ,-----------------------------.   ,-----------------------------.
// |  Q  |  W  |  F  |  P  |  G  |   |  J  |  L  |  U  |  Y  |  '  |
// |  A  |  R  |  S  |  T  |  D  |   |  H  |  N  |  E  |  I  |  O  |
// |  Z  |  X  |  C  |  V  |  B  |   |  K  |  M  |  ,  |  .  |  /  |
// `-----------| ... | ... | ... |   | ... | ... | ... |-----------'
//             `-----------------'   `-----------------'
			bindings = <
&kp Q		&kp W		&kp F		&kp P		&kp G		&kp J		&kp L		&kp U		&kp Y		&kp APOS
&kp A		&kp R		&kp S		&kp T		&kp D		&kp H		&kp N		&kp E		&kp I		&kp O
&kp Z		&kp X		&kp C		&kp V		&kp B		&kp K		&kp M		&kp COMMA	&kp DOT		&kp SLASH
THUMB_ROW
			>;
		};

		sym_layer {
			label = "SYM";
// ,-----------------------------.   ,-----------------------------.
// |  +  |  @  |  {  |  }  |  #  |   |  ^  |  &  |  :  |  ;  |  _  |
// |  -  |  =  |  (  |  )  |  *  |   |  $  |  ⌘  |  ⇧  |  ⌃  |  ⎇  |
// |  !  |  \  |  [  |  ]  |  `  |   |  %  |  |  |  <  |  >  |  ~  |
// `-----------|     |     | SPC |   |     | XXX |     |-----------'
//             `-----------------'   `-----------------'
			bindings = <
&kp PLUS	&kp AT_SIGN	&kp LBRC	&kp RBRC	&kp HASH	&kp CARET	&kp AMPERSAND	&kp CLMK_COLON	&kp CLMK_SEMI	&kp UNDERSCORE
&kp MINUS	&kp EQUAL	&kp LPAR	&kp RPAR	&kp ASTERISK	&kp DOLLAR	&sk LCMD	&sk LSHIFT	&sk LCTRL	&sk LALT
&kp EXCL	&kp BACKSLASH	&kp LBKT	&kp RBKT	&kp GRAVE	&kp PERCENT	&kp PIPE	&kp LT		&kp GT		&kp TILDE
				&trans		&trans		&kp SPACE	&trans		&trans		&trans
			>;
		};

		// The media keys and left/right arrows on on the thumb-side for one-handed use.
		// Duplicate tab for cmd-tab etc.
		//TODO: Keys to maybe put here - mute, spotlight, search help, force quit, emoji.
		nav_layer {
			label = "NAV";
// ,-----------------------------.   ,-----------------------------.
// | LCK | CS4 | CS3 | DIS | VUP |   |     | BCK | FWD |     |     |
// |  ⎇  |  ⌃  |  ⇧  |  ⌘  | VDW |   |     | LFT | DWN | UP  | RGH |
// | COL | PRV | PLY | NXT | MUT |   |     | HME | PDN | PUP | END |
// `-----------|     | XXX |     |   | TAB |     |     |-----------'
//             `-----------------'   `-----------------'
			bindings = <
&kp LG(LC(Q))	&kp LG(LS(N4))	&kp LG(LS(N3))	&kp LG(LS(DOT))	&kp C_VOL_UP	&none		&kp LG(LBKT)	&kp LG(RBKT)	&none		&none
&sk LALT	&sk LCTRL	&sk LSHIFT	&sk LCMD	&kp C_VOL_DN	&none		&kp LEFT	&kp DOWN	&kp UP		&kp RIGHT
&tog L_CLMK	&kp C_PREV	&kp C_PP	&kp C_NEXT	&kp C_MUTE	&none		&kp HOME	&kp PAGE_DOWN	&kp PAGE_UP	&kp END
				&trans		&trans		&trans		&kp TAB		&trans		&trans
			>;
		};

		num_layer {
			label = "NUM";
// ,-----------------------------.   ,-----------------------------.
// |     |  4  |  5  |  6  |     |   | BT0 | BT1 | BT2 | BT3 | BT4 |
// |  .  |  1  |  2  |  3  |     |   |     |  ⌘  |  ⇧  |  ⌃  |  ⎇  |
// |     |  7  |  8  |  9  |     |   | BTC |     |     |     |     |
// `-----------|     |     |  0  |   |     |     | XXX |-----------'
//             `-----------------'   `-----------------'
			bindings = <
&none		&kp N4		&kp N5		&kp N6		&none		&bt BT_SEL 0	&bt BT_SEL 1	&bt BT_SEL 2	&bt BT_SEL 3	&bt BT_SEL 4
&kp DOT		&kp N1		&kp N2		&kp N3		&none		&none		&sk LCMD	&sk LSHIFT	&sk LCTRL	&sk LALT
&none		&kp N7		&kp N8		&kp N9		&none		&none		&none		&none		&none		&bt BT_CLR
				&trans		&trans		&kp N0		&trans		&trans		&trans
			>;
		};


		//TODO: The mouse keys will go on the right hand side once zmk #778 is merged.
		fun_layer {
			label = "FUN";
// ,-----------------------------.   ,-----------------------------.
// |     | F4  | F5  | F6  | F10 |   |     |     |     |     |     |
// |     | F1  | F2  | F3  | F11 |   |     |     |     |     |     |
// |     | F7  | F8  | F9  | F12 |   |     |     |     |     |     |
// `-----------|     |     |     |   |     |     | XXX |-----------'
//             `-----------------'   `-----------------'
			bindings = <
&none		&kp F4		&kp F5		&kp F6		&kp F10		&none		&none		&none		&none		&none
&none		&kp F1		&kp F2		&kp F3		&kp F11		&none		&none		&none		&none		&none
&none		&kp F7		&kp F8		&kp F3		&kp F12		&none		&none		&none		&none		&none
				&trans		&trans		&trans		&trans		&trans		&trans
			>;
		};
	};

	chosen {
		zmk,matrix_transform = &five_column_transform;
	};
};