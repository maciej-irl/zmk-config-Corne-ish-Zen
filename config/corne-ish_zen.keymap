/*
*
* Copyright (c) 2021 Darryl deHaan
* SPDX-License-Identifier: MIT
*
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

// Useful for vim.
#define CLMK_G T
#define CLMK_O SEMICOLON
#define CLMK_SEMI P
#define CLMK_COLON LS(P)
// Sticky-hold key.
#define SHK(keycode) &shk keycode keycode 

#define L_BASE 0
#define L_SYM 1
#define L_NAV 2
#define L_NUM 3
#define L_FUN 4

// I can't find some keys?
// * Tab is on the nav layer.
// * Backspace is on

// ,-----------------------------.   ,-----------------------------.
// |     |     |     |     |     |   |     |     |     |     |     |
// |     |     |     |     |     |   |     |     |     |     |     |
// |     |     |     |     |     |   |     |     |     |     |     |
// `-----------|     |     |     |   |     |     |     |-----------'
//             `-----------------'   `-----------------'

// Key Positions
// ,-----------------------------.   ,-----------------------------.
// |  0  |  1  |  2  |  3  |  4  |   |  5  |  6  |  7  |  8  |  9  |
// | 10  | 11  | 12  | 13  | 14  |   | 15  | 16  | 17  | 18  | 19  |
// | 20  | 21  | 22  | 23  | 24  |   | 25  | 26  | 27  | 28  | 29  |
// `-----------| 30  | 31  | 32  |   | 33  | 34  | 35  |-----------'
//             `-----------------'   `-----------------'

// See https://zmk.dev/docs/behaviors/sticky-key#ignore-modifiers
&sk {
	quick-release;
	release-after-ms = <1000>;
};

/ {
	conditional_layers {
		compatible = "zmk,conditional-layers";
		tri_layer {
			if-layers = <L_SYM L_NAV>;
			then-layer = <L_NUM>;
		};
	};

	behaviors {
		shk: sticky_hold_key {
			compatible = "zmk,behavior-hold-tap";
			label = "sticky-hold key";
			#binding-cells = <2>;
			tapping_term_ms = <200>;
			flavor = "balanced";
			bindings = <&kp>, <&sk>;
		};
		mm_comma: mm_comma_lpar {
			compatible = "zmk,behavior-mod-morph";
			label = "MM_COMMA";
			#binding-cells = <0>;
			bindings = <&kp COMMA>, <&kp LEFT_PARENTHESIS>;
			mods = <MOD_LSFT>;
		};
		mm_dot: mm_dot_rpar {
			compatible = "zmk,behavior-mod-morph";
			label = "MM_DOT";
			#binding-cells = <0>;
			bindings = <&kp DOT>, <&kp RIGHT_PARENTHESIS>;
			mods = <MOD_LSFT>;
		};
	};

	keymap {
		compatible = "zmk,keymap";

		default_layer {
			label = "BASE";
// ,-----------------------------.   ,-----------------------------.
// |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U  |  I  |  O  |  '  |
// |  A  |  S  |  D  |  F  |  G  |   |  H  |  J  |  K  |  L  |  ;  |
// |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M  | , ( | . ) |  /  |
// `-----------| TAB | nav | SPC |   | SFT | sym | RET |-----------'
//             `-----------------'   `-----------------'
			bindings = <
&kp Q		&kp W		&kp E		&kp R		&kp T		&kp Y		&kp U		&kp I		&kp O		&kp APOS
&kp A		&kp S		&kp D		&kp F		&kp G		&kp H		&kp J		&kp K		&kp L		&kp CLMK_O
&kp Z		&kp X		&kp C		&kp V		&kp B		&kp N		&kp M		&mm_comma	&mm_dot		&kp FSLH
				&kp TAB		&mo L_NAV	&kp SPACE	SHK(LSHIFT)	&mo L_SYM 	&kp RET
			>;
		};

		sym_layer {
			label = "SYM";
// ,-----------------------------.   ,-----------------------------.
// |     |  _  |  ;  |  !  |  *  |   |  $  |  +  |  &  |  |  |     |
// |  "  |  :  |  (  |  )  |  ?  |   |  \  |  ⌘  |  ⇧  |  ⌃  |  ⎇  |
// |  `  |  @  |  -  |  ~  |  #  |   |  ^  |  <  |  =  |  >  |  %  |
// `-----------|     |     | BSP |   |     | XXX |     |-----------'
//             `-----------------'   `-----------------'
			bindings = <
&none		&kp LT		&kp EQUAL	&kp GT		&kp HASH	&kp CARET	&kp LBKT	&kp GRAVE	&kp RBKT	&none
&kp UNDER	&kp MINUS	&kp CLMK_SEMI	&kp CLMK_COLON	&kp EXCL	&kp DOLLAR	SHK(LCMD)	SHK(LSHIFT)	SHK(LCTRL)	SHK(LALT)
&kp TILDE	&kp LBRC	&kp UNDER	&kp RBRC	&kp ASTERISK	&kp PERCENT	&kp AMPERSAND	&kp GRAVE	&kp PIPE	&kp BACKSLASH
				&trans		&trans		&kp BSPC	&trans		&trans		&trans
			>;
		};

		// The media keys and left/right arrows on on the thumb-side for one-handed use.
		nav_layer {
			label = "NAV";
// ,-----------------------------.   ,-----------------------------.
// | LCK | LFT |     | RGH | VUP |   |     | BCK | FWD |     |     |
// |  ⎇  |  ⌃  |  ⇧  |  ⌘  | VDW |   |     | LFT | DWN | UP  | RGH |
// |     | PRV | PLY | NXT | MUT |   |     |     |     |     |     |
// `-----------|     | XXX |     |   | ESC |     |     |-----------'
//             `-----------------'   `-----------------'
			bindings = <
&kp LG(LC(Q))	&kp LEFT	&none		&kp RIGHT	&kp C_VOL_UP	&none		&kp LG(LBKT)	&kp LG(RBKT)	&none		&none
SHK(LALT)	SHK(LCTRL)	SHK(LSHIFT)	SHK(LCMD)	&kp C_VOL_DN	&none		&kp LEFT	&kp DOWN	&kp UP		&kp RIGHT
&none		&kp C_PREV	&kp C_PP	&kp C_NEXT	&kp C_MUTE	&none		&none		&none		&none		&none
				&trans		&trans		&trans		&kp ESC		&trans		&trans
			>;
		};

		// Since num is a conditional layer it needs to have a higher index than nav and sym.
		num_layer {
			label = "NUM";
// ,-----------------------------.   ,-----------------------------.
// |     |  4  |  5  |  6  |     |   | BT0 | BT1 | BT2 | BT3 | BT4 |
// |  0  |  1  |  2  |  3  |     |   | BTC |  ⌘  |  ⇧  |  ⌃  |  ⎇  |
// |     |  7  |  8  |  9  |     |   |     |     |     |     |     |
// `-----------|     | XXX |     |   |     | XXX |     |-----------'
//             `-----------------'   `-----------------'
			bindings = <
&none		&kp N4		&kp N5		&kp N6		&none		&bt BT_SEL 0	&bt BT_SEL 1	&bt BT_SEL 2	&bt BT_SEL 3	&bt BT_SEL 4
&kp N0		&kp N1		&kp N2		&kp N3		&none		&bt BT_CLR	SHK(LCMD)	SHK(LSHIFT)	SHK(LCTRL)	SHK(LALT)
&none		&kp N7		&kp N8		&kp N9		&none		&none		&none		&none 		&none		&none
				&trans		&trans		&trans		&trans		&trans		&trans
			>;
		};


		//TODO: The mouse keys will go on the right hand side once zmk #778 is merged.
		//TODO: How should this layer be activated?
		fun_layer {
			label = "FUN";
// ,-----------------------------.   ,-----------------------------.
// |     | F7  | F8  | F9  | F10 |   |     |     |     |     |     |
// |     | F4  | F5  | F6  | F11 |   |     |     |     |     |     |
// |     | F1  | F2  | F3  | F12 |   |     |     |     |     |     |
// `-----------|     |     |     |   |     |     |     |-----------'
//             `-----------------'   `-----------------'
			bindings = <
&none		&kp F7		&kp F8		&kp F9		&kp F10		&none		&none		&none		&none		&none
&none		&kp F4		&kp F5		&kp F6		&kp F11		&none		&none		&none		&none		&none
&none		&kp F1		&kp F2		&kp F3		&kp F12		&none		&none		&none		&none		&none
				&trans		&trans		&trans		&trans		&trans		&trans
			>;
		};
	};

	chosen {
		zmk,matrix_transform = &five_column_transform;
	};
};